on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  qa:
    name: QA Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install Dependencies
        run: |
          python3 -m venv .venv
          .venv/bin/pip install --upgrade pip
          pip install uv
          uv sync --frozen

      - name: Run QA Checks
        run: .venv/bin/pre-commit run --all-files

      - name: Run Tests with Coverage
        run: |
          .venv/bin/coverage run -m pytest tests/ && .venv/bin/coverage report --fail-under=95 && .venv/bin/coverage html

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.12, 3.13]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m venv .venv
          if [ "${{ runner.os }}" == "Windows" ]; then
            .venv/Scripts/python.exe -m pip install --upgrade pip
            .venv/Scripts/python.exe -m pip install uv
            .venv/Scripts/uv.exe sync --frozen
          else
            .venv/bin/pip install --upgrade pip
            pip install uv
            uv sync --frozen
          fi
        shell: bash

      - name: Run Tests
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            .venv/Scripts/python.exe -m pytest . -vv --random-order
          else
            .venv/bin/pytest . -vv --random-order
          fi
        shell: bash
